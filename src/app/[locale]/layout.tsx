// import type { Metadata } from "next";
// import { Geist, Geist_Mono, Cairo } from "next/font/google";
// import { NextIntlClientProvider } from "next-intl";
// import { getMessages } from "next-intl/server";
// import "../styles/globals.css";
// import { ReduxProvider } from "@/redux/reduxProvider";
// import { SessionProvider } from "next-auth/react";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// const cairoFont = Cairo({
//   variable: "--font-cairo",
//   subsets: ["arabic"],
//   weight: ["300", "400", "600"], // Specify weights
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default async function RootLayout({
//   children,
//   params,
// }: Readonly<{
//   children: React.ReactNode;
//   params: Promise<{ locale: string }>;
// }>) {
//   const resolvedParams = await params; // Await the promise to get the actual params object
//   const messages = await getMessages();
//   return (
//     <html lang={resolvedParams.locale}>
//       {" "}
//       {/* Use resolvedParams.locale to get the string */}
//       <body
//         className={`antialiased ${
//           resolvedParams.locale === "ar"
//             ? cairoFont.variable
//             : geistMono.variable
//         } ${geistSans.variable}`}
//       >
//         <NextIntlClientProvider messages={messages}>
//           <ReduxProvider>
//             <SessionProvider>
//               <div>{children}</div>
//             </SessionProvider>
//           </ReduxProvider>
//         </NextIntlClientProvider>
//       </body>
//     </html>
//   );
// }

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { getMessages } from "next-intl/server";
import "../../styles/globals.css";
import { Providers } from "./providers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body className={`antialiased ${geistMono.variable} ${geistSans.variable}`}>
        <Providers messages={messages}>
          {children}
        </Providers>
      </body>
    </html>
  );
}